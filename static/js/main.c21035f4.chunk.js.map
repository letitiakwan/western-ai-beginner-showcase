{"version":3,"sources":["cancer-detection.jpg","components/Card.js","components/AppBar.js","components/Modal.js","components/CancerDetection.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","maxWidth","media","height","MediaCard","props","classes","Card","className","to","link","CardActionArea","CardMedia","image","title","CardContent","Typography","gutterBottom","variant","component","color","description","theme","flexGrow","menuButton","marginRight","spacing","DenseAppBar","AppBar","position","style","background","Toolbar","IconButton","edge","aria-label","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","border","boxShadow","shadows","padding","width","borderRadius","marginLeft","marginTop","TransitionsModal","React","useState","open","setOpen","Button","onClick","buttonText","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Object","keys","totalPredictions","map","cancer","toFixed","CancerDetection","MODEL_API_URL","displayMessage","setDisplayMessage","prediction","setPrediction","setTotalPredictions","convertToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","e","a","length","catch","Error","b64","console","log","message","re","RegExp","replace","axios","post","then","res","cancerName","data","cancerProbability","response","onChange","fileContainerStyle","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c21035f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cancer-detection.82b82cca.jpg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport {Link} from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nexport default function MediaCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n    <Link className=\"card-link\" to={'/' + props.link}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={props.image}\n          title=\"Cancer Detection\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {props.title}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {props.description}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      </Link>\n    </Card>\n\n  );\n}\n","import React from 'react';\nimport \"../App.css\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\nimport {Link} from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function DenseAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{background: ''}}> \n        <Toolbar variant=\"dense\">\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n          <Link className='app-bar-link' to={'/'}>\n            <HomeIcon />\n          </Link>\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Western AI Beginner Team Showcase\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport \"../App.css\";\nimport Button from '@material-ui/core/Button';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  root: {\n    width: '15%',\n    borderRadius: '40px',\n    marginLeft: '18.6%',\n    marginTop: '1%',\n  }\n}));\n\nexport default function TransitionsModal(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n        <div className={classes.root}>\n            <Button variant=\"contained\" onClick={handleOpen} color=\"primary\">\n                {props.buttonText}\n            </Button>\n      </div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n          {/* https://stackoverflow.com/questions/38444195/loop-and-render-an-object-in-react-js */}\n           <Typography variant=\"body2\" display=\"block\" gutterBottom>\n             {Object.keys(props.totalPredictions).map((cancer) => \n              <p>{cancer + \": \" + (props.totalPredictions[cancer]*100).toFixed(3) + \"%\"}</p> \n            )}  \n          {/* https://www.w3schools.com/jsref/jsref_tofixed.asp */}\n          </Typography>  \n            </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from \"./AppBar.js\"\nimport Modal from \"./Modal.js\"\nimport \"../App.css\";\nimport ImageUploader from 'react-images-upload'\nimport axios from 'axios';\n\nconst CancerDetection = () => {\n\n  const MODEL_API_URL = 'https://lilt.pythonanywhere.com/api/detect-cancer/'\n  const [displayMessage, setDisplayMessage] = useState(\"\")\n  const [prediction, setPrediction] = useState(\"\")\n  const [totalPredictions, setTotalPredictions] = useState(null)\n\n  // https://stackoverflow.com/questions/36280818/how-to-convert-file-to-base64-in-javascript\n  const convertToBase64 = (file) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file)\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error)\n  })\n\n  async function handleImageUpload (e) {\n    setDisplayMessage(\"PREDICTING...\")\n    setPrediction(\"\")\n    setTotalPredictions(null)\n    // https://stackoverflow.com/questions/36280818/how-to-convert-file-to-base64-in-javascript\n    let b64 = await convertToBase64(e[e.length-1]).catch(e => Error(e))\n    if (b64 instanceof Error) {\n      console.log('Error: ', b64.message)\n      return;\n    }\n\n    // https://stackoverflow.com/questions/5642315/regular-expression-to-get-a-string-between-two-strings-in-javascript/40782646\n    let re = new RegExp('data:(.*)/(.*);base64,')\n    b64 = b64.replace(re, '')\n\n    // https://github.com/axios/axios/issues/960\n    axios.post(MODEL_API_URL, {\n      file: b64\n      })\n      .then(res => {\n        setDisplayMessage(\"\")\n        let cancerName = Object.keys(res.data.prediction)[0] // https://stackoverflow.com/questions/3298477/get-the-first-key-name-of-a-javascript-object/20455510\n        let cancerProbability = (res.data.prediction[cancerName] * 100).toFixed(3) //https://www.w3schools.com/jsref/jsref_tofixed.asp\n        if (cancerProbability > 0.8){\n          setPrediction(\"The model predicted: \" + cancerName + \" with \" + cancerProbability + \"% probability\")\n        } else {\n          setPrediction(\"The model did not find a cancer match with strong enough probability.\")\n        }\n        delete res.data.prediction\n        setTotalPredictions(res.data)\n      })\n      .catch(error => {\n        setDisplayMessage(\"ERROR ... PLEASE TRY AGAIN\")\n        console.log(error.response)\n      })\n    }\n\n  return (\n    <div>\n      <AppBar />\n      <div className = 'cancer-detection-text-wrapper'>\n        <Typography className='cancer-detection-title' variant=\"h2\" component=\"h2\" gutterBottom>\n          Skin Cancer Detector\n        </Typography>\n        <p className='cancer-detection-paragraph'>Over the course of the year, the Western AI Beginner Medical Imaging team has worked hard to create a machine learning program that can detect different types of skin cancer. Check it out! Upload a picture of your mole and see if it's cancerous or not.</p>\n        <Typography className = 'cancer-detection-paragraph' variant=\"caption\" component=\"h2\" gutterBottom>\n          Created by Western AI's Beginner Medical Imaging Team: Kevin Zhang, Daniyal Syed, Jinhao (Jason) Wang, Nicholas Chu\n        </Typography>\n        <Typography className='cancer-detection-paragraph' variant=\"overline\" display=\"block\" gutterBottom>\n          DISCLAIMER: Results are not 100% accurate. Do not use for medical diagnosis. Predictions may take one minute or longer. Images under 1MB are faster.\n        </Typography>\n      </div>\n      <ImageUploader onChange={handleImageUpload} className=\"image-uploader\" fileContainerStyle={{boxShadow: '2px 2px 3px 5px rgba(0.05, 0.05, 0.05, 0.05)', padding: '20px 20px'}}/>\n      <div className = 'cancer-detection-text-wrapper'>\n        <Typography className='cancer-detection-loading' variant=\"overline\" display=\"block\" gutterBottom>\n          {displayMessage}\n        </Typography>\n        <Typography className='cancer-detection-prediction' variant=\"button\" display=\"block\" gutterBottom>\n          {prediction}\n        </Typography>\n        \n        {totalPredictions ? \n            <Modal buttonText=\"View Prediction Mix\" totalPredictions={totalPredictions}/>\n         : null\n        }     \n        </div>  \n    </div>\n  )\n\n}\n\nexport default CancerDetection","import React from'react';\nimport \"../App.css\";\nimport Card from \"./Card.js\"\nimport AppBar from \"./AppBar.js\"\nimport {Switch, Route} from 'react-router-dom'\nimport CancerDetection from './CancerDetection.js'\nimport image from '../cancer-detection.jpg' // https://create-react-app.dev/docs/adding-images-fonts-and-files/\nconst App = () => {\n\n\n    return (\n      <Switch>\n        <Route path = '/cancerdetection' component={CancerDetection} />\n        \n        <div className = \"App\">\n            <AppBar/>\n            <div className='home-card'>\n            <Card title = \"Skin Cancer Detection\" image={image} link = \"cancerdetection\" description = \"Over the course of the year, the Western AI beginner medical imaging team has worked hard to create a machine learning program that can detect different types of skin cancer. Check it out! Upload a picture of your mole and see if it's cancerous or not\"/>\n            </div>\n        </div>\n\n\n      </Switch>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// This project uses code from Stack Overflow under this license: https://creativecommons.org/licenses/by-sa/4.0/legalcode\n// Some changes were made to the code found on those discussions\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}